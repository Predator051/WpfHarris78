// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: LessonParameters.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LessonParametersSet {

  /// <summary>Holder for reflection information generated from LessonParameters.proto</summary>
  public static partial class LessonParametersReflection {

    #region Descriptor
    /// <summary>File descriptor for LessonParameters.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LessonParametersReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZMZXNzb25QYXJhbWV0ZXJzLnByb3RvEhNMZXNzb25QYXJhbWV0ZXJzU2V0",
            "IuAJChBMZXNzb25QYXJhbWV0ZXJzEgwKBG5hbWUYASABKAkSPAoGb3B0aW9u",
            "GAIgASgLMiwuTGVzc29uUGFyYW1ldGVyc1NldC5MZXNzb25QYXJhbWV0ZXJz",
            "Lk9wdGlvbhI8CgZjb21tb24YAyABKAsyLC5MZXNzb25QYXJhbWV0ZXJzU2V0",
            "Lkxlc3NvblBhcmFtZXRlcnMuQ29tbW9uEj4KB3Byb2dyYW0YBCABKAsyLS5M",
            "ZXNzb25QYXJhbWV0ZXJzU2V0Lkxlc3NvblBhcmFtZXRlcnMuUHJvZ3JhbRpg",
            "CgZDb21tb24SDAoEbW9kZRgBIAEoCRINCgVzdGF0ZRgCIAEoCRIPCgdjb3Vw",
            "bGVyGAMgASgIEg8KB2hhbmRzZXQYBCABKAgSCwoDdXNiGAUgASgIEgoKAnNx",
            "GAYgASgIGscECgZPcHRpb24SQQoFcmFkaW8YASABKAsyMi5MZXNzb25QYXJh",
            "bWV0ZXJzU2V0Lkxlc3NvblBhcmFtZXRlcnMuT3B0aW9uLlJhZGlvEj8KBHRl",
            "c3QYAiABKAsyMS5MZXNzb25QYXJhbWV0ZXJzU2V0Lkxlc3NvblBhcmFtZXRl",
            "cnMuT3B0aW9uLlRlc3QasgEKBVJhZGlvEhQKDHR4UG93ZXJMZXZlbBgBIAEo",
            "CRIUCgxzcXVlbGNoTGV2ZWwYAiABKAkSFQoNZm1TcXVlbGNoVHlwZRgDIAEo",
            "CRIXCg9pbnRlcm5hbENvdXBsZXIYBCABKAkSFAoMcmFkaW9TaWxlbmNlGAUg",
            "ASgJEgsKA2JmbxgGIAEoCRIXCg9yeE5vaWNlQmxhbmtpbmcYByABKAkSEQoJ",
            "cmFkaW9Mb2NrGAggASgJGoMCCgRUZXN0EkIKA2JpdBgBIAEoCzI1Lkxlc3Nv",
            "blBhcmFtZXRlcnNTZXQuTGVzc29uUGFyYW1ldGVycy5PcHRpb24uVGVzdC5C",
            "aXQSDwoHYmF0dGVyeRgCIAEoCBIMCgR0ZW1wGAMgASgIEhUKDXZzd3JGcmVx",
            "dWVuY3kYBCABKAkagAEKA0JpdBIOCgZzeXN0ZW0YASABKAgSEQoJcmZDb3Vw",
            "bGVyGAIgASgIEg8KB3ByZXBvc3QYAyABKAgSEgoKZXh0ZXJuYWxQYRgEIAEo",
            "CBILCgNrZHAYBSABKAgSCwoDa2R1GAYgASgIEhcKD2ludGVybmFsQ291cGxl",
            "chgHIAEoCBrVAgoHUHJvZ3JhbRJECgZjb21zZWMYASABKAsyNC5MZXNzb25Q",
            "YXJhbWV0ZXJzU2V0Lkxlc3NvblBhcmFtZXRlcnMuUHJvZ3JhbS5Db21zZWMa",
            "gwIKBkNvbXNlYxJGCgRrZXlzGAEgAygLMjguTGVzc29uUGFyYW1ldGVyc1Nl",
            "dC5MZXNzb25QYXJhbWV0ZXJzLlByb2dyYW0uQ29tc2VjLktleRqwAQoDS2V5",
            "Ek4KBHR5cGUYASABKA4yQC5MZXNzb25QYXJhbWV0ZXJzU2V0Lkxlc3NvblBh",
            "cmFtZXRlcnMuUHJvZ3JhbS5Db21zZWMuS2V5LktleVR5cGUSDAoEbmFtZRgC",
            "IAEoCRILCgNrZXkYBSABKAkSDgoGYXdzS2V5GAYgASgJIi4KB0tleVR5cGUS",
            "CwoHQ0lUQURFTBAAEgoKBkFlczI1NhABEgoKBkFlczEyOBACYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LessonParametersSet.LessonParameters), global::LessonParametersSet.LessonParameters.Parser, new[]{ "Name", "Option", "Common", "Program" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LessonParametersSet.LessonParameters.Types.Common), global::LessonParametersSet.LessonParameters.Types.Common.Parser, new[]{ "Mode", "State", "Coupler", "Handset", "Usb", "Sq" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LessonParametersSet.LessonParameters.Types.Option), global::LessonParametersSet.LessonParameters.Types.Option.Parser, new[]{ "Radio", "Test" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LessonParametersSet.LessonParameters.Types.Option.Types.Radio), global::LessonParametersSet.LessonParameters.Types.Option.Types.Radio.Parser, new[]{ "TxPowerLevel", "SquelchLevel", "FmSquelchType", "InternalCoupler", "RadioSilence", "Bfo", "RxNoiceBlanking", "RadioLock" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LessonParametersSet.LessonParameters.Types.Option.Types.Test), global::LessonParametersSet.LessonParameters.Types.Option.Types.Test.Parser, new[]{ "Bit", "Battery", "Temp", "VswrFrequency" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LessonParametersSet.LessonParameters.Types.Option.Types.Test.Types.Bit), global::LessonParametersSet.LessonParameters.Types.Option.Types.Test.Types.Bit.Parser, new[]{ "System", "RfCoupler", "Prepost", "ExternalPa", "Kdp", "Kdu", "InternalCoupler" }, null, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::LessonParametersSet.LessonParameters.Types.Program), global::LessonParametersSet.LessonParameters.Types.Program.Parser, new[]{ "Comsec" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LessonParametersSet.LessonParameters.Types.Program.Types.Comsec), global::LessonParametersSet.LessonParameters.Types.Program.Types.Comsec.Parser, new[]{ "Keys" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LessonParametersSet.LessonParameters.Types.Program.Types.Comsec.Types.Key), global::LessonParametersSet.LessonParameters.Types.Program.Types.Comsec.Types.Key.Parser, new[]{ "Type", "Name", "Key_", "AwsKey" }, null, new[]{ typeof(global::LessonParametersSet.LessonParameters.Types.Program.Types.Comsec.Types.Key.Types.KeyType) }, null, null)})})})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LessonParameters : pb::IMessage<LessonParameters> {
    private static readonly pb::MessageParser<LessonParameters> _parser = new pb::MessageParser<LessonParameters>(() => new LessonParameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LessonParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LessonParametersSet.LessonParametersReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LessonParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LessonParameters(LessonParameters other) : this() {
      name_ = other.name_;
      option_ = other.option_ != null ? other.option_.Clone() : null;
      common_ = other.common_ != null ? other.common_.Clone() : null;
      program_ = other.program_ != null ? other.program_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LessonParameters Clone() {
      return new LessonParameters(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "option" field.</summary>
    public const int OptionFieldNumber = 2;
    private global::LessonParametersSet.LessonParameters.Types.Option option_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LessonParametersSet.LessonParameters.Types.Option Option {
      get { return option_; }
      set {
        option_ = value;
      }
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 3;
    private global::LessonParametersSet.LessonParameters.Types.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LessonParametersSet.LessonParameters.Types.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "program" field.</summary>
    public const int ProgramFieldNumber = 4;
    private global::LessonParametersSet.LessonParameters.Types.Program program_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LessonParametersSet.LessonParameters.Types.Program Program {
      get { return program_; }
      set {
        program_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LessonParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LessonParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Option, other.Option)) return false;
      if (!object.Equals(Common, other.Common)) return false;
      if (!object.Equals(Program, other.Program)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (option_ != null) hash ^= Option.GetHashCode();
      if (common_ != null) hash ^= Common.GetHashCode();
      if (program_ != null) hash ^= Program.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (option_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Option);
      }
      if (common_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Common);
      }
      if (program_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Program);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (option_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Option);
      }
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (program_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Program);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LessonParameters other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.option_ != null) {
        if (option_ == null) {
          Option = new global::LessonParametersSet.LessonParameters.Types.Option();
        }
        Option.MergeFrom(other.Option);
      }
      if (other.common_ != null) {
        if (common_ == null) {
          Common = new global::LessonParametersSet.LessonParameters.Types.Common();
        }
        Common.MergeFrom(other.Common);
      }
      if (other.program_ != null) {
        if (program_ == null) {
          Program = new global::LessonParametersSet.LessonParameters.Types.Program();
        }
        Program.MergeFrom(other.Program);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (option_ == null) {
              Option = new global::LessonParametersSet.LessonParameters.Types.Option();
            }
            input.ReadMessage(Option);
            break;
          }
          case 26: {
            if (common_ == null) {
              Common = new global::LessonParametersSet.LessonParameters.Types.Common();
            }
            input.ReadMessage(Common);
            break;
          }
          case 34: {
            if (program_ == null) {
              Program = new global::LessonParametersSet.LessonParameters.Types.Program();
            }
            input.ReadMessage(Program);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LessonParameters message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Common : pb::IMessage<Common> {
        private static readonly pb::MessageParser<Common> _parser = new pb::MessageParser<Common>(() => new Common());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Common> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LessonParametersSet.LessonParameters.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Common() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Common(Common other) : this() {
          mode_ = other.mode_;
          state_ = other.state_;
          coupler_ = other.coupler_;
          handset_ = other.handset_;
          usb_ = other.usb_;
          sq_ = other.sq_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Common Clone() {
          return new Common(this);
        }

        /// <summary>Field number for the "mode" field.</summary>
        public const int ModeFieldNumber = 1;
        private string mode_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Mode {
          get { return mode_; }
          set {
            mode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "state" field.</summary>
        public const int StateFieldNumber = 2;
        private string state_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string State {
          get { return state_; }
          set {
            state_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "coupler" field.</summary>
        public const int CouplerFieldNumber = 3;
        private bool coupler_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Coupler {
          get { return coupler_; }
          set {
            coupler_ = value;
          }
        }

        /// <summary>Field number for the "handset" field.</summary>
        public const int HandsetFieldNumber = 4;
        private bool handset_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Handset {
          get { return handset_; }
          set {
            handset_ = value;
          }
        }

        /// <summary>Field number for the "usb" field.</summary>
        public const int UsbFieldNumber = 5;
        private bool usb_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Usb {
          get { return usb_; }
          set {
            usb_ = value;
          }
        }

        /// <summary>Field number for the "sq" field.</summary>
        public const int SqFieldNumber = 6;
        private bool sq_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Sq {
          get { return sq_; }
          set {
            sq_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Common);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Common other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Mode != other.Mode) return false;
          if (State != other.State) return false;
          if (Coupler != other.Coupler) return false;
          if (Handset != other.Handset) return false;
          if (Usb != other.Usb) return false;
          if (Sq != other.Sq) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Mode.Length != 0) hash ^= Mode.GetHashCode();
          if (State.Length != 0) hash ^= State.GetHashCode();
          if (Coupler != false) hash ^= Coupler.GetHashCode();
          if (Handset != false) hash ^= Handset.GetHashCode();
          if (Usb != false) hash ^= Usb.GetHashCode();
          if (Sq != false) hash ^= Sq.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Mode.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Mode);
          }
          if (State.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(State);
          }
          if (Coupler != false) {
            output.WriteRawTag(24);
            output.WriteBool(Coupler);
          }
          if (Handset != false) {
            output.WriteRawTag(32);
            output.WriteBool(Handset);
          }
          if (Usb != false) {
            output.WriteRawTag(40);
            output.WriteBool(Usb);
          }
          if (Sq != false) {
            output.WriteRawTag(48);
            output.WriteBool(Sq);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Mode.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Mode);
          }
          if (State.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(State);
          }
          if (Coupler != false) {
            size += 1 + 1;
          }
          if (Handset != false) {
            size += 1 + 1;
          }
          if (Usb != false) {
            size += 1 + 1;
          }
          if (Sq != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Common other) {
          if (other == null) {
            return;
          }
          if (other.Mode.Length != 0) {
            Mode = other.Mode;
          }
          if (other.State.Length != 0) {
            State = other.State;
          }
          if (other.Coupler != false) {
            Coupler = other.Coupler;
          }
          if (other.Handset != false) {
            Handset = other.Handset;
          }
          if (other.Usb != false) {
            Usb = other.Usb;
          }
          if (other.Sq != false) {
            Sq = other.Sq;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Mode = input.ReadString();
                break;
              }
              case 18: {
                State = input.ReadString();
                break;
              }
              case 24: {
                Coupler = input.ReadBool();
                break;
              }
              case 32: {
                Handset = input.ReadBool();
                break;
              }
              case 40: {
                Usb = input.ReadBool();
                break;
              }
              case 48: {
                Sq = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Option : pb::IMessage<Option> {
        private static readonly pb::MessageParser<Option> _parser = new pb::MessageParser<Option>(() => new Option());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Option> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LessonParametersSet.LessonParameters.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Option() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Option(Option other) : this() {
          radio_ = other.radio_ != null ? other.radio_.Clone() : null;
          test_ = other.test_ != null ? other.test_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Option Clone() {
          return new Option(this);
        }

        /// <summary>Field number for the "radio" field.</summary>
        public const int RadioFieldNumber = 1;
        private global::LessonParametersSet.LessonParameters.Types.Option.Types.Radio radio_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LessonParametersSet.LessonParameters.Types.Option.Types.Radio Radio {
          get { return radio_; }
          set {
            radio_ = value;
          }
        }

        /// <summary>Field number for the "test" field.</summary>
        public const int TestFieldNumber = 2;
        private global::LessonParametersSet.LessonParameters.Types.Option.Types.Test test_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LessonParametersSet.LessonParameters.Types.Option.Types.Test Test {
          get { return test_; }
          set {
            test_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Option);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Option other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Radio, other.Radio)) return false;
          if (!object.Equals(Test, other.Test)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (radio_ != null) hash ^= Radio.GetHashCode();
          if (test_ != null) hash ^= Test.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (radio_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Radio);
          }
          if (test_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Test);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (radio_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Radio);
          }
          if (test_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Test);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Option other) {
          if (other == null) {
            return;
          }
          if (other.radio_ != null) {
            if (radio_ == null) {
              Radio = new global::LessonParametersSet.LessonParameters.Types.Option.Types.Radio();
            }
            Radio.MergeFrom(other.Radio);
          }
          if (other.test_ != null) {
            if (test_ == null) {
              Test = new global::LessonParametersSet.LessonParameters.Types.Option.Types.Test();
            }
            Test.MergeFrom(other.Test);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (radio_ == null) {
                  Radio = new global::LessonParametersSet.LessonParameters.Types.Option.Types.Radio();
                }
                input.ReadMessage(Radio);
                break;
              }
              case 18: {
                if (test_ == null) {
                  Test = new global::LessonParametersSet.LessonParameters.Types.Option.Types.Test();
                }
                input.ReadMessage(Test);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Option message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Radio : pb::IMessage<Radio> {
            private static readonly pb::MessageParser<Radio> _parser = new pb::MessageParser<Radio>(() => new Radio());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Radio> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::LessonParametersSet.LessonParameters.Types.Option.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Radio() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Radio(Radio other) : this() {
              txPowerLevel_ = other.txPowerLevel_;
              squelchLevel_ = other.squelchLevel_;
              fmSquelchType_ = other.fmSquelchType_;
              internalCoupler_ = other.internalCoupler_;
              radioSilence_ = other.radioSilence_;
              bfo_ = other.bfo_;
              rxNoiceBlanking_ = other.rxNoiceBlanking_;
              radioLock_ = other.radioLock_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Radio Clone() {
              return new Radio(this);
            }

            /// <summary>Field number for the "txPowerLevel" field.</summary>
            public const int TxPowerLevelFieldNumber = 1;
            private string txPowerLevel_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string TxPowerLevel {
              get { return txPowerLevel_; }
              set {
                txPowerLevel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "squelchLevel" field.</summary>
            public const int SquelchLevelFieldNumber = 2;
            private string squelchLevel_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string SquelchLevel {
              get { return squelchLevel_; }
              set {
                squelchLevel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "fmSquelchType" field.</summary>
            public const int FmSquelchTypeFieldNumber = 3;
            private string fmSquelchType_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string FmSquelchType {
              get { return fmSquelchType_; }
              set {
                fmSquelchType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "internalCoupler" field.</summary>
            public const int InternalCouplerFieldNumber = 4;
            private string internalCoupler_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string InternalCoupler {
              get { return internalCoupler_; }
              set {
                internalCoupler_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "radioSilence" field.</summary>
            public const int RadioSilenceFieldNumber = 5;
            private string radioSilence_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string RadioSilence {
              get { return radioSilence_; }
              set {
                radioSilence_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "bfo" field.</summary>
            public const int BfoFieldNumber = 6;
            private string bfo_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Bfo {
              get { return bfo_; }
              set {
                bfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "rxNoiceBlanking" field.</summary>
            public const int RxNoiceBlankingFieldNumber = 7;
            private string rxNoiceBlanking_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string RxNoiceBlanking {
              get { return rxNoiceBlanking_; }
              set {
                rxNoiceBlanking_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "radioLock" field.</summary>
            public const int RadioLockFieldNumber = 8;
            private string radioLock_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string RadioLock {
              get { return radioLock_; }
              set {
                radioLock_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Radio);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Radio other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (TxPowerLevel != other.TxPowerLevel) return false;
              if (SquelchLevel != other.SquelchLevel) return false;
              if (FmSquelchType != other.FmSquelchType) return false;
              if (InternalCoupler != other.InternalCoupler) return false;
              if (RadioSilence != other.RadioSilence) return false;
              if (Bfo != other.Bfo) return false;
              if (RxNoiceBlanking != other.RxNoiceBlanking) return false;
              if (RadioLock != other.RadioLock) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (TxPowerLevel.Length != 0) hash ^= TxPowerLevel.GetHashCode();
              if (SquelchLevel.Length != 0) hash ^= SquelchLevel.GetHashCode();
              if (FmSquelchType.Length != 0) hash ^= FmSquelchType.GetHashCode();
              if (InternalCoupler.Length != 0) hash ^= InternalCoupler.GetHashCode();
              if (RadioSilence.Length != 0) hash ^= RadioSilence.GetHashCode();
              if (Bfo.Length != 0) hash ^= Bfo.GetHashCode();
              if (RxNoiceBlanking.Length != 0) hash ^= RxNoiceBlanking.GetHashCode();
              if (RadioLock.Length != 0) hash ^= RadioLock.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (TxPowerLevel.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(TxPowerLevel);
              }
              if (SquelchLevel.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(SquelchLevel);
              }
              if (FmSquelchType.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(FmSquelchType);
              }
              if (InternalCoupler.Length != 0) {
                output.WriteRawTag(34);
                output.WriteString(InternalCoupler);
              }
              if (RadioSilence.Length != 0) {
                output.WriteRawTag(42);
                output.WriteString(RadioSilence);
              }
              if (Bfo.Length != 0) {
                output.WriteRawTag(50);
                output.WriteString(Bfo);
              }
              if (RxNoiceBlanking.Length != 0) {
                output.WriteRawTag(58);
                output.WriteString(RxNoiceBlanking);
              }
              if (RadioLock.Length != 0) {
                output.WriteRawTag(66);
                output.WriteString(RadioLock);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (TxPowerLevel.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(TxPowerLevel);
              }
              if (SquelchLevel.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SquelchLevel);
              }
              if (FmSquelchType.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(FmSquelchType);
              }
              if (InternalCoupler.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(InternalCoupler);
              }
              if (RadioSilence.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(RadioSilence);
              }
              if (Bfo.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Bfo);
              }
              if (RxNoiceBlanking.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(RxNoiceBlanking);
              }
              if (RadioLock.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(RadioLock);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Radio other) {
              if (other == null) {
                return;
              }
              if (other.TxPowerLevel.Length != 0) {
                TxPowerLevel = other.TxPowerLevel;
              }
              if (other.SquelchLevel.Length != 0) {
                SquelchLevel = other.SquelchLevel;
              }
              if (other.FmSquelchType.Length != 0) {
                FmSquelchType = other.FmSquelchType;
              }
              if (other.InternalCoupler.Length != 0) {
                InternalCoupler = other.InternalCoupler;
              }
              if (other.RadioSilence.Length != 0) {
                RadioSilence = other.RadioSilence;
              }
              if (other.Bfo.Length != 0) {
                Bfo = other.Bfo;
              }
              if (other.RxNoiceBlanking.Length != 0) {
                RxNoiceBlanking = other.RxNoiceBlanking;
              }
              if (other.RadioLock.Length != 0) {
                RadioLock = other.RadioLock;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    TxPowerLevel = input.ReadString();
                    break;
                  }
                  case 18: {
                    SquelchLevel = input.ReadString();
                    break;
                  }
                  case 26: {
                    FmSquelchType = input.ReadString();
                    break;
                  }
                  case 34: {
                    InternalCoupler = input.ReadString();
                    break;
                  }
                  case 42: {
                    RadioSilence = input.ReadString();
                    break;
                  }
                  case 50: {
                    Bfo = input.ReadString();
                    break;
                  }
                  case 58: {
                    RxNoiceBlanking = input.ReadString();
                    break;
                  }
                  case 66: {
                    RadioLock = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class Test : pb::IMessage<Test> {
            private static readonly pb::MessageParser<Test> _parser = new pb::MessageParser<Test>(() => new Test());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Test> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::LessonParametersSet.LessonParameters.Types.Option.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Test() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Test(Test other) : this() {
              bit_ = other.bit_ != null ? other.bit_.Clone() : null;
              battery_ = other.battery_;
              temp_ = other.temp_;
              vswrFrequency_ = other.vswrFrequency_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Test Clone() {
              return new Test(this);
            }

            /// <summary>Field number for the "bit" field.</summary>
            public const int BitFieldNumber = 1;
            private global::LessonParametersSet.LessonParameters.Types.Option.Types.Test.Types.Bit bit_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::LessonParametersSet.LessonParameters.Types.Option.Types.Test.Types.Bit Bit {
              get { return bit_; }
              set {
                bit_ = value;
              }
            }

            /// <summary>Field number for the "battery" field.</summary>
            public const int BatteryFieldNumber = 2;
            private bool battery_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Battery {
              get { return battery_; }
              set {
                battery_ = value;
              }
            }

            /// <summary>Field number for the "temp" field.</summary>
            public const int TempFieldNumber = 3;
            private bool temp_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Temp {
              get { return temp_; }
              set {
                temp_ = value;
              }
            }

            /// <summary>Field number for the "vswrFrequency" field.</summary>
            public const int VswrFrequencyFieldNumber = 4;
            private string vswrFrequency_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string VswrFrequency {
              get { return vswrFrequency_; }
              set {
                vswrFrequency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Test);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Test other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Bit, other.Bit)) return false;
              if (Battery != other.Battery) return false;
              if (Temp != other.Temp) return false;
              if (VswrFrequency != other.VswrFrequency) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (bit_ != null) hash ^= Bit.GetHashCode();
              if (Battery != false) hash ^= Battery.GetHashCode();
              if (Temp != false) hash ^= Temp.GetHashCode();
              if (VswrFrequency.Length != 0) hash ^= VswrFrequency.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (bit_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Bit);
              }
              if (Battery != false) {
                output.WriteRawTag(16);
                output.WriteBool(Battery);
              }
              if (Temp != false) {
                output.WriteRawTag(24);
                output.WriteBool(Temp);
              }
              if (VswrFrequency.Length != 0) {
                output.WriteRawTag(34);
                output.WriteString(VswrFrequency);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (bit_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bit);
              }
              if (Battery != false) {
                size += 1 + 1;
              }
              if (Temp != false) {
                size += 1 + 1;
              }
              if (VswrFrequency.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(VswrFrequency);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Test other) {
              if (other == null) {
                return;
              }
              if (other.bit_ != null) {
                if (bit_ == null) {
                  Bit = new global::LessonParametersSet.LessonParameters.Types.Option.Types.Test.Types.Bit();
                }
                Bit.MergeFrom(other.Bit);
              }
              if (other.Battery != false) {
                Battery = other.Battery;
              }
              if (other.Temp != false) {
                Temp = other.Temp;
              }
              if (other.VswrFrequency.Length != 0) {
                VswrFrequency = other.VswrFrequency;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (bit_ == null) {
                      Bit = new global::LessonParametersSet.LessonParameters.Types.Option.Types.Test.Types.Bit();
                    }
                    input.ReadMessage(Bit);
                    break;
                  }
                  case 16: {
                    Battery = input.ReadBool();
                    break;
                  }
                  case 24: {
                    Temp = input.ReadBool();
                    break;
                  }
                  case 34: {
                    VswrFrequency = input.ReadString();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the Test message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public sealed partial class Bit : pb::IMessage<Bit> {
                private static readonly pb::MessageParser<Bit> _parser = new pb::MessageParser<Bit>(() => new Bit());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Bit> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::LessonParametersSet.LessonParameters.Types.Option.Types.Test.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Bit() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Bit(Bit other) : this() {
                  system_ = other.system_;
                  rfCoupler_ = other.rfCoupler_;
                  prepost_ = other.prepost_;
                  externalPa_ = other.externalPa_;
                  kdp_ = other.kdp_;
                  kdu_ = other.kdu_;
                  internalCoupler_ = other.internalCoupler_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Bit Clone() {
                  return new Bit(this);
                }

                /// <summary>Field number for the "system" field.</summary>
                public const int SystemFieldNumber = 1;
                private bool system_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool System {
                  get { return system_; }
                  set {
                    system_ = value;
                  }
                }

                /// <summary>Field number for the "rfCoupler" field.</summary>
                public const int RfCouplerFieldNumber = 2;
                private bool rfCoupler_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool RfCoupler {
                  get { return rfCoupler_; }
                  set {
                    rfCoupler_ = value;
                  }
                }

                /// <summary>Field number for the "prepost" field.</summary>
                public const int PrepostFieldNumber = 3;
                private bool prepost_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Prepost {
                  get { return prepost_; }
                  set {
                    prepost_ = value;
                  }
                }

                /// <summary>Field number for the "externalPa" field.</summary>
                public const int ExternalPaFieldNumber = 4;
                private bool externalPa_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool ExternalPa {
                  get { return externalPa_; }
                  set {
                    externalPa_ = value;
                  }
                }

                /// <summary>Field number for the "kdp" field.</summary>
                public const int KdpFieldNumber = 5;
                private bool kdp_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Kdp {
                  get { return kdp_; }
                  set {
                    kdp_ = value;
                  }
                }

                /// <summary>Field number for the "kdu" field.</summary>
                public const int KduFieldNumber = 6;
                private bool kdu_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Kdu {
                  get { return kdu_; }
                  set {
                    kdu_ = value;
                  }
                }

                /// <summary>Field number for the "internalCoupler" field.</summary>
                public const int InternalCouplerFieldNumber = 7;
                private bool internalCoupler_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool InternalCoupler {
                  get { return internalCoupler_; }
                  set {
                    internalCoupler_ = value;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as Bit);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Bit other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (System != other.System) return false;
                  if (RfCoupler != other.RfCoupler) return false;
                  if (Prepost != other.Prepost) return false;
                  if (ExternalPa != other.ExternalPa) return false;
                  if (Kdp != other.Kdp) return false;
                  if (Kdu != other.Kdu) return false;
                  if (InternalCoupler != other.InternalCoupler) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (System != false) hash ^= System.GetHashCode();
                  if (RfCoupler != false) hash ^= RfCoupler.GetHashCode();
                  if (Prepost != false) hash ^= Prepost.GetHashCode();
                  if (ExternalPa != false) hash ^= ExternalPa.GetHashCode();
                  if (Kdp != false) hash ^= Kdp.GetHashCode();
                  if (Kdu != false) hash ^= Kdu.GetHashCode();
                  if (InternalCoupler != false) hash ^= InternalCoupler.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (System != false) {
                    output.WriteRawTag(8);
                    output.WriteBool(System);
                  }
                  if (RfCoupler != false) {
                    output.WriteRawTag(16);
                    output.WriteBool(RfCoupler);
                  }
                  if (Prepost != false) {
                    output.WriteRawTag(24);
                    output.WriteBool(Prepost);
                  }
                  if (ExternalPa != false) {
                    output.WriteRawTag(32);
                    output.WriteBool(ExternalPa);
                  }
                  if (Kdp != false) {
                    output.WriteRawTag(40);
                    output.WriteBool(Kdp);
                  }
                  if (Kdu != false) {
                    output.WriteRawTag(48);
                    output.WriteBool(Kdu);
                  }
                  if (InternalCoupler != false) {
                    output.WriteRawTag(56);
                    output.WriteBool(InternalCoupler);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (System != false) {
                    size += 1 + 1;
                  }
                  if (RfCoupler != false) {
                    size += 1 + 1;
                  }
                  if (Prepost != false) {
                    size += 1 + 1;
                  }
                  if (ExternalPa != false) {
                    size += 1 + 1;
                  }
                  if (Kdp != false) {
                    size += 1 + 1;
                  }
                  if (Kdu != false) {
                    size += 1 + 1;
                  }
                  if (InternalCoupler != false) {
                    size += 1 + 1;
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Bit other) {
                  if (other == null) {
                    return;
                  }
                  if (other.System != false) {
                    System = other.System;
                  }
                  if (other.RfCoupler != false) {
                    RfCoupler = other.RfCoupler;
                  }
                  if (other.Prepost != false) {
                    Prepost = other.Prepost;
                  }
                  if (other.ExternalPa != false) {
                    ExternalPa = other.ExternalPa;
                  }
                  if (other.Kdp != false) {
                    Kdp = other.Kdp;
                  }
                  if (other.Kdu != false) {
                    Kdu = other.Kdu;
                  }
                  if (other.InternalCoupler != false) {
                    InternalCoupler = other.InternalCoupler;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 8: {
                        System = input.ReadBool();
                        break;
                      }
                      case 16: {
                        RfCoupler = input.ReadBool();
                        break;
                      }
                      case 24: {
                        Prepost = input.ReadBool();
                        break;
                      }
                      case 32: {
                        ExternalPa = input.ReadBool();
                        break;
                      }
                      case 40: {
                        Kdp = input.ReadBool();
                        break;
                      }
                      case 48: {
                        Kdu = input.ReadBool();
                        break;
                      }
                      case 56: {
                        InternalCoupler = input.ReadBool();
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

        }
        #endregion

      }

      public sealed partial class Program : pb::IMessage<Program> {
        private static readonly pb::MessageParser<Program> _parser = new pb::MessageParser<Program>(() => new Program());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Program> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LessonParametersSet.LessonParameters.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Program() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Program(Program other) : this() {
          comsec_ = other.comsec_ != null ? other.comsec_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Program Clone() {
          return new Program(this);
        }

        /// <summary>Field number for the "comsec" field.</summary>
        public const int ComsecFieldNumber = 1;
        private global::LessonParametersSet.LessonParameters.Types.Program.Types.Comsec comsec_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LessonParametersSet.LessonParameters.Types.Program.Types.Comsec Comsec {
          get { return comsec_; }
          set {
            comsec_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Program);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Program other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Comsec, other.Comsec)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (comsec_ != null) hash ^= Comsec.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (comsec_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Comsec);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (comsec_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Comsec);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Program other) {
          if (other == null) {
            return;
          }
          if (other.comsec_ != null) {
            if (comsec_ == null) {
              Comsec = new global::LessonParametersSet.LessonParameters.Types.Program.Types.Comsec();
            }
            Comsec.MergeFrom(other.Comsec);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (comsec_ == null) {
                  Comsec = new global::LessonParametersSet.LessonParameters.Types.Program.Types.Comsec();
                }
                input.ReadMessage(Comsec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Program message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Comsec : pb::IMessage<Comsec> {
            private static readonly pb::MessageParser<Comsec> _parser = new pb::MessageParser<Comsec>(() => new Comsec());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Comsec> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::LessonParametersSet.LessonParameters.Types.Program.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Comsec() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Comsec(Comsec other) : this() {
              keys_ = other.keys_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Comsec Clone() {
              return new Comsec(this);
            }

            /// <summary>Field number for the "keys" field.</summary>
            public const int KeysFieldNumber = 1;
            private static readonly pb::FieldCodec<global::LessonParametersSet.LessonParameters.Types.Program.Types.Comsec.Types.Key> _repeated_keys_codec
                = pb::FieldCodec.ForMessage(10, global::LessonParametersSet.LessonParameters.Types.Program.Types.Comsec.Types.Key.Parser);
            private readonly pbc::RepeatedField<global::LessonParametersSet.LessonParameters.Types.Program.Types.Comsec.Types.Key> keys_ = new pbc::RepeatedField<global::LessonParametersSet.LessonParameters.Types.Program.Types.Comsec.Types.Key>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::LessonParametersSet.LessonParameters.Types.Program.Types.Comsec.Types.Key> Keys {
              get { return keys_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Comsec);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Comsec other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!keys_.Equals(other.keys_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= keys_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              keys_.WriteTo(output, _repeated_keys_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += keys_.CalculateSize(_repeated_keys_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Comsec other) {
              if (other == null) {
                return;
              }
              keys_.Add(other.keys_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    keys_.AddEntriesFrom(input, _repeated_keys_codec);
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the Comsec message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public sealed partial class Key : pb::IMessage<Key> {
                private static readonly pb::MessageParser<Key> _parser = new pb::MessageParser<Key>(() => new Key());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Key> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::LessonParametersSet.LessonParameters.Types.Program.Types.Comsec.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Key() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Key(Key other) : this() {
                  type_ = other.type_;
                  name_ = other.name_;
                  key_ = other.key_;
                  awsKey_ = other.awsKey_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Key Clone() {
                  return new Key(this);
                }

                /// <summary>Field number for the "type" field.</summary>
                public const int TypeFieldNumber = 1;
                private global::LessonParametersSet.LessonParameters.Types.Program.Types.Comsec.Types.Key.Types.KeyType type_ = global::LessonParametersSet.LessonParameters.Types.Program.Types.Comsec.Types.Key.Types.KeyType.Citadel;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::LessonParametersSet.LessonParameters.Types.Program.Types.Comsec.Types.Key.Types.KeyType Type {
                  get { return type_; }
                  set {
                    type_ = value;
                  }
                }

                /// <summary>Field number for the "name" field.</summary>
                public const int NameFieldNumber = 2;
                private string name_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Name {
                  get { return name_; }
                  set {
                    name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "key" field.</summary>
                public const int Key_FieldNumber = 5;
                private string key_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Key_ {
                  get { return key_; }
                  set {
                    key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "awsKey" field.</summary>
                public const int AwsKeyFieldNumber = 6;
                private string awsKey_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string AwsKey {
                  get { return awsKey_; }
                  set {
                    awsKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as Key);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Key other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (Type != other.Type) return false;
                  if (Name != other.Name) return false;
                  if (Key_ != other.Key_) return false;
                  if (AwsKey != other.AwsKey) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (Type != global::LessonParametersSet.LessonParameters.Types.Program.Types.Comsec.Types.Key.Types.KeyType.Citadel) hash ^= Type.GetHashCode();
                  if (Name.Length != 0) hash ^= Name.GetHashCode();
                  if (Key_.Length != 0) hash ^= Key_.GetHashCode();
                  if (AwsKey.Length != 0) hash ^= AwsKey.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (Type != global::LessonParametersSet.LessonParameters.Types.Program.Types.Comsec.Types.Key.Types.KeyType.Citadel) {
                    output.WriteRawTag(8);
                    output.WriteEnum((int) Type);
                  }
                  if (Name.Length != 0) {
                    output.WriteRawTag(18);
                    output.WriteString(Name);
                  }
                  if (Key_.Length != 0) {
                    output.WriteRawTag(42);
                    output.WriteString(Key_);
                  }
                  if (AwsKey.Length != 0) {
                    output.WriteRawTag(50);
                    output.WriteString(AwsKey);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (Type != global::LessonParametersSet.LessonParameters.Types.Program.Types.Comsec.Types.Key.Types.KeyType.Citadel) {
                    size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
                  }
                  if (Name.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
                  }
                  if (Key_.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Key_);
                  }
                  if (AwsKey.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(AwsKey);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Key other) {
                  if (other == null) {
                    return;
                  }
                  if (other.Type != global::LessonParametersSet.LessonParameters.Types.Program.Types.Comsec.Types.Key.Types.KeyType.Citadel) {
                    Type = other.Type;
                  }
                  if (other.Name.Length != 0) {
                    Name = other.Name;
                  }
                  if (other.Key_.Length != 0) {
                    Key_ = other.Key_;
                  }
                  if (other.AwsKey.Length != 0) {
                    AwsKey = other.AwsKey;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 8: {
                        Type = (global::LessonParametersSet.LessonParameters.Types.Program.Types.Comsec.Types.Key.Types.KeyType) input.ReadEnum();
                        break;
                      }
                      case 18: {
                        Name = input.ReadString();
                        break;
                      }
                      case 42: {
                        Key_ = input.ReadString();
                        break;
                      }
                      case 50: {
                        AwsKey = input.ReadString();
                        break;
                      }
                    }
                  }
                }

                #region Nested types
                /// <summary>Container for nested types declared in the Key message type.</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static partial class Types {
                  public enum KeyType {
                    [pbr::OriginalName("CITADEL")] Citadel = 0,
                    [pbr::OriginalName("Aes256")] Aes256 = 1,
                    [pbr::OriginalName("Aes128")] Aes128 = 2,
                  }

                }
                #endregion

              }

            }
            #endregion

          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
